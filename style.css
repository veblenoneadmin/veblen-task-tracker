// Initialize task editor modal variables
let currentModalTaskData = null;

// Open task editor modal
function openTaskEditorModal() {
    // Create modal if it doesn't exist
    if (!document.getElementById('taskEditorModal')) {
        createTaskEditorModal();
        // Add event listener to the form
        document.getElementById('taskEditModalForm').addEventListener('submit', handleModalTaskUpdate);
    }
    
    // Show modal
    document.getElementById('taskEditorModal').style.display = 'block';
}

// Close task editor modal
function closeTaskEditorModal() {
    const modal = document.getElementById('taskEditorModal');
    if (modal) {
        modal.style.display = 'none';
        // Reset form
        resetModalTaskEditor();
    }
}

// Paste from clipboard
async function pasteFromClipboard(inputId) {
    try {
        const text = await navigator.clipboard.readText();
        // Extract UUID pattern from pasted text
        const uuidPattern = /[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/i;
        const match = text.match(uuidPattern);
        
        if (match) {
            document.getElementById(inputId).value = match[0];
            showToast('ID pasted successfully!', 'success');
        } else {
            showToast('No valid ID found in clipboard', 'warning');
        }
    } catch (err) {
        showToast('Failed to read clipboard', 'error');
    }
}

// Load task for editing
async function loadTaskForEdit() {
    const masterBoardId = document.getElementById('masterBoardId').value.trim();
    const companyBoardId = document.getElementById('companyBoardId').value.trim();
    
    if (!masterBoardId && !companyBoardId) {
        showToast('Please enter at least one Task ID', 'warning');
        return;
    }
    
    // Show loading state
    showToast('Loading task data...', 'info');
    
    try {
        // Call API to get task data
        // For now, we'll use the loaded tasks data if available
        let taskData = null;
        
        // Try to find task in loaded tasks
        if (window.loadedTasks && window.loadedTasks.length > 0) {
            taskData = window.loadedTasks.find(task => 
                task.intake_task_id === companyBoardId || 
                task.master_task_id === masterBoardId
            );
        }
        
        if (!taskData) {
            // Make API call to fetch task data
            const response = await fetch(`/api/task/${companyBoardId || masterBoardId}?company=${currentEmployee}`);
            if (response.ok) {
                const result = await response.json();
                taskData = result.data;
            }
        }
        
        if (taskData) {
            currentModalTaskData = {
                master_board_id: masterBoardId,
                company_board_id: companyBoardId,
                company: taskData.company || 'VEBLEN (Internal)',
                task_name: taskData.task_name || taskData.title || '',
                description: taskData.description || '',
                priority: taskData.priority || 'Medium',
                due_date: taskData.due_date || '',
                status: taskData.current_status || taskData.status || '',
                progress: taskData.progress || 0,
                assigned: taskData.assigned || []
            };
        } else {
            // Create empty task data structure
            currentModalTaskData = {
                master_board_id: masterBoardId,
                company_board_id: companyBoardId,
                company: '',
                task_name: '',
                description: '',
                priority: 'Medium',
                due_date: '',
                status: '',
                progress: 0,
                assigned: []
            };
        }
        
        // Populate the form
        populateModalEditForm(currentModalTaskData);
        
        // Show task info
        displayModalTaskInfo(currentModalTaskData);
        
        // Show the edit form
        document.getElementById('taskEditModalForm').classList.add('active');
        document.getElementById('taskInfoDisplay').classList.add('active');
        
        showToast('Task loaded successfully!', 'success');
    } catch (error) {
        console.error('Error loading task:', error);
        showToast('Failed to load task data', 'error');
    }
}

// Display task info in modal
function displayModalTaskInfo(taskData) {
    const infoGrid = document.getElementById('taskInfoGrid');
    infoGrid.innerHTML = `
        <div class="info-item">
            <span class="info-label">Master Board ID</span>
            <span class="info-value">${taskData.master_board_id || 'N/A'}</span>
        </div>
        <div class="info-item">
            <span class="info-label">Company Board ID</span>
            <span class="info-value">${taskData.company_board_id || 'N/A'}</span>
        </div>
        <div class="info-item">
            <span class="info-label">Company</span>
            <span class="info-value">${taskData.company || 'Not Set'}</span>
        </div>
        <div class="info-item">
            <span class="info-label">Current Status</span>
            <span class="info-value">${taskData.status || 'Not Set'}</span>
        </div>
    `;
}

// Populate modal edit form
function populateModalEditForm(taskData) {
    document.getElementById('editCompany').value = taskData.company || '';
    document.getElementById('editModalTaskName').value = taskData.task_name || '';
    document.getElementById('editModalDescription').value = taskData.description || '';
    document.getElementById('editPriority').value = taskData.priority || 'Medium';
    document.getElementById('editModalDueDate').value = taskData.due_date || '';
    document.getElementById('editModalStatus').value = taskData.status || '';
    document.getElementById('editModalProgress').value = taskData.progress || 0;
    
    // Update progress preview
    updateModalProgressPreview(taskData.progress || 0);
    
    // Set assigned users
    const assignedSelect = document.getElementById('editModalAssigned');
    Array.from(assignedSelect.options).forEach(option => {
        option.selected = taskData.assigned?.includes(option.value);
    });
    
    // Set update option based on whether both IDs are present
    document.getElementById('updateBothBoards').checked = 
        !!(taskData.master_board_id && taskData.company_board_id);
}

// Update modal progress preview
function updateModalProgressPreview(value) {
    const progressBar = document.getElementById('modalProgressBar');
    const progressValue = document.getElementById('modalProgressValue');
    const autoStatus = document.getElementById('modalAutoStatus');
    
    progressBar.style.width = `${value}%`;
    progressValue.textContent = `${value}%`;
    
    // Update auto status indicator
    let status = 'Project';
    let statusClass = 'status-project';
    
    if (value >= 10 && value < 100) {
        status = 'Current Project';
        statusClass = 'status-current';
    } else if (value >= 100) {
        status = 'Project Finished';
        statusClass = 'status-finished';
    }
    
    autoStatus.textContent = status;
    autoStatus.className = `status-indicator ${statusClass}`;
}

// Quick complete modal task
async function quickCompleteModalTask() {
    if (!currentModalTaskData) {
        showToast('Please load a task first', 'warning');
        return;
    }
    
    if (!confirm('Are you sure you want to mark this task as complete?')) {
        return;
    }
    
    // Set progress to 100 and update
    document.getElementById('editModalProgress').value = 100;
    updateModalProgressPreview(100);
    
    // Submit the form
    await handleModalTaskUpdate({ preventDefault: () => {} });
}

// Reset modal task editor
function resetModalTaskEditor() {
    if (document.getElementById('taskEditModalForm')) {
        document.getElementById('taskEditModalForm').reset();
        document.getElementById('taskEditModalForm').classList.remove('active');
    }
    if (document.getElementById('taskInfoDisplay')) {
        document.getElementById('taskInfoDisplay').classList.remove('active');
    }
    document.getElementById('masterBoardId').value = '';
    document.getElementById('companyBoardId').value = '';
    currentModalTaskData = null;
    updateModalProgressPreview(0);
}

// Handle modal task update
async function handleModalTaskUpdate(event) {
    event.preventDefault();
    
    if (!currentModalTaskData) {
        showToast('No task loaded', 'error');
        return;
    }
    
    // Get selected assigned users
    const assignedSelect = document.getElementById('editModalAssigned');
    const assignedTo = Array.from(assignedSelect.selectedOptions).map(option => option.value);
    
    const updateData = {
        action: 'update_details',
        master_task_id: currentModalTaskData.master_board_id,
        task_id: currentModalTaskData.company_board_id || currentModalTaskData.master_board_id,
        company: document.getElementById('editCompany').value,
        task_name: document.getElementById('editModalTaskName').value,
        description: document.getElementById('editModalDescription').value,
        priority: document.getElementById('editPriority').value,
        due_date: document.getElementById('editModalDueDate').value,
        assigned_to: assignedTo,
        progress: parseInt(document.getElementById('editModalProgress').value),
        status: document.getElementById('editModalStatus').value || null,
        update_master: document.getElementById('updateBothBoards').checked,
        employee: currentEmployee || 'Unknown',
        timestamp: new Date().toISOString()
    };
    
    try {
        showToast('Updating task...', 'info');
        
        const response = await fetch('/api/task-update', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updateData)
        });

        const data = await response.json();
        
        if (data.success) {
            showToast('Task updated successfully!', 'success');
            
            // Update current task data
            currentModalTaskData = {
                ...currentModalTaskData,
                ...updateData
            };
            
            // Update task info display
            displayModalTaskInfo(currentModalTaskData);
            
            // Refresh assigned tasks if visible
            if (currentEmployee) {
                loadAssignedTasks();
            }
        } else {
            showToast(data.error || 'Failed to update task', 'error');
        }
    } catch (error) {
        console.error('Error updating task:', error);
        showToast('Error updating task', 'error');
    }
}

// Close modal when clicking outside
window.addEventListener('click', function(event) {
    const modal = document.getElementById('taskEditorModal');
    if (event.target === modal) {
        closeTaskEditorModal();
    }
});

// Add CSS for task editor modal if not already present
if (!document.getElementById('taskEditorModalStyles')) {
    const modalStyles = document.createElement('style');
    modalStyles.id = 'taskEditorModalStyles';
    modalStyles.innerHTML = `
        .modal-large {
            width: 90%;
            max-width: 900px;
        }
        
        .modal-body {
            padding: 1.5rem;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .id-input-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 2rem;
            padding: 1.5rem;
            background: var(--bg-tertiary);
            border-radius: var(--radius-md);
            border: 2px dashed var(--border-color);
        }
        
        .id-input-group h3 {
            grid-column: 1 / -1;
            margin: 0 0 1rem 0;
            font-size: 1rem;
            color: var(--text-secondary);
            text-align: center;
            font-weight: 500;
        }
        
        .paste-area {
            position: relative;
        }
        
        .paste-input {
            width: 100%;
            padding: 0.75rem 3.5rem 0.75rem 0.75rem;
            border: 2px solid var(--border-color);
            border-radius: var(--radius-md);
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 0.8125rem;
            background: var(--bg-primary);
            transition: all var(--transition-fast);
        }
        
        .paste-input:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }
        
        .paste-label {
            display: block;
            font-weight: 500;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }
        
        .load-task-btn {
            grid-column: 1 / -1;
            margin-top: 1rem;
        }
        
        .quick-paste-btn {
            position: absolute;
            right: 0.5rem;
            top: 50%;
            transform: translateY(-50%);
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--radius-sm);
            cursor: pointer;
            transition: all var(--transition-fast);
            white-space: nowrap;
        }
        
        .quick-paste-btn:hover {
            background: var(--primary-dark);
            transform: translateY(-50%) scale(1.05);
        }
        
        .task-edit-form {
            display: none;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 2px solid var(--border-color);
        }
        
        .task-edit-form.active {
            display: block;
        }
        
        .edit-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }
        
        .edit-grid .full-width {
            grid-column: 1 / -1;
        }
        
        .progress-editor {
            margin-top: 1rem;
        }
        
        .progress-preview {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 0.5rem;
        }
        
        .progress-preview .progress-bar-container {
            flex: 1;
        }
        
        .assigned-select {
            height: 120px;
            padding: 0.5rem;
        }
        
        .assigned-select option {
            padding: 0.25rem 0.5rem;
        }
        
        .assigned-select option:checked {
            background-color: var(--primary-color);
            color: white;
        }
        
        .status-indicator {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: var(--radius-sm);
            font-size: 0.75rem;
            font-weight: 500;
            white-space: nowrap;
        }
        
        .task-info-display {
            background: var(--bg-tertiary);
            border-radius: var(--radius-md);
            padding: 1rem;
            margin-bottom: 1.5rem;
            display: none;
        }
        
        .task-info-display.active {
            display: block;
        }
        
        .task-info-display h4 {
            margin: 0 0 0.5rem 0;
            color: var(--primary-color);
            font-size: 1rem;
            font-weight: 600;
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 0.75rem;
            font-size: 0.875rem;
        }
        
        .info-item {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }
        
        .info-label {
            font-weight: 500;
            color: var(--text-secondary);
            font-size: 0.75rem;
        }
        
        .info-value {
            color: var(--text-primary);
            font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
            font-size: 0.8125rem;
            word-break: break-all;
        }
        
        #taskEditModalForm .modal-footer {
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: flex-end;
            gap: 0.75rem;
            background: transparent;
        }
        
        @media (max-width: 768px) {
            .modal-large {
                width: 95%;
            }
            
            .id-input-group {
                grid-template-columns: 1fr;
                padding: 1rem;
            }
            
            .edit-grid {
                grid-template-columns: 1fr;
            }
            
            .edit-grid .full-width {
                grid-column: 1;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
            
            .paste-input {
                font-size: 0.75rem;
            }
            
            #taskEditModalForm .modal-footer {
                flex-direction: column;
            }
            
            #taskEditModalForm .modal-footer .btn {
                width: 100%;
            }
        }
    `;
    document.head.appendChild(modalStyles);
}
